@using APP.Data.Models;
@using System.ComponentModel;

<div class="container">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col-8">
                    <h2>@meeting.MeetingName</h2>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <p>Message: @meeting.MeetingMessage</p>
                    <p>Location: @meeting.MeetingLocation</p>
                </div>
                <div class="col">
                    <p>Date: @meeting.MeetingDate</p>
                    @if (meeting.MeetingCancellationDate != null)
                    {
                        <p>Cancellation date: @meeting.MeetingCancellationDate.Value.ToString("hh:mm tt MM/dd/yyyy")</p>
                    }
                    else
                    {
                        <p>Cancellation date: Not cancelled</p>
                    }
                </div>
                <div class="col">
                    @if (EditEnabled)
                    {
                        <button class="btn btn-primary btn-lg p-1 m-1" @onclick="() => EditMeeting()">Edit</button>
                    }
                    @if (CancelEnabled)
                    {
                        <button class="btn btn-danger btn-lg p-1 m-1" @onclick="() => CancelMeeting()">Cancel</button>
                    }
                </div>

            </div>
        </div>
    </div>

</div>

@code
{

    [Parameter]
    public Meeting meeting { get; set; }

    [Parameter]
    public bool CancelEnabled { get; set; } = false;

    [Parameter]
    public bool EditEnabled { get; set; } = false;

    /// <summary>
    /// Event on delete button pressed.
    /// </summary>
    [Parameter]
    public EventCallback<Meeting> OnCancel { get; set; }

    /// <summary>
    /// Event on edit button pressed.
    /// </summary>
    [Parameter]
    public EventCallback<Meeting> OnEdit { get; set; }

    /// <summary>
    /// Event on edit button pressed.
    /// </summary>
    [Parameter]
    public EventCallback<Meeting> OnAdd { get; set; }

    protected override void OnInitialized()
    {

    }

    /// <summary>
    /// Deletes the current pet.
    /// </summary>
    /// <returns>Task</returns>
    private Task CancelMeeting()
    {
        if (CancelEnabled)
        {
            return OnCancel.InvokeAsync(meeting);
        }
        return Task.CompletedTask;
    }

    /// <summary>
    /// Edit the current pet.
    /// </summary>
    /// <returns>Task</returns>
    private Task EditMeeting()
    {
        if (EditEnabled)
        {
            return OnEdit.InvokeAsync(meeting);
        }
        return Task.CompletedTask;
    }
}
