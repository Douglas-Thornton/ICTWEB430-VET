@using APP.Data.Models;
@using APP.Interfaces;
@using Microsoft.Extensions.Configuration;
@using APP.Services;
@using APP.States;
@using System.ComponentModel;
@inject IConfiguration Configuration;
@inject MeetingService meetingService;
@inject LoggedUserState loggedUserState
@inject InvitedUserService inviteUserService;

@if(loggedUserState.LoggedUser == null)
{
    <div class="background-container">
        <img src=@backgroundImagePath alt="@backgroundImagePath" class="background-image" />
        <div class="card" style="@loggedUserState.PStyleTagCSS">
            <h1>You need to be logged in to view this page</h1>
        </div>
    </div>
}
else{
    <div class="background-container">
        <img src=@backgroundImagePath alt="@backgroundImagePath" class="background-image"/>
        <div class="card" style="@loggedUserState.PStyleTagCSS">
            <h1 style="@loggedUserState.H1StyleTagCSS">Meetup</h1>
            <label>Your Name</label>
            <input placeholder="Insert your name here" />
            <label>Your Pets Name</label>
            <input placeholder="Insert your pets name here" />
            <label>Is your pet a dog or cat?</label>
            <select>
                <option>Select an option</option>
                <option value="dog">Dog</option>
                <option value="cat">Cat</option>
            </select>
            <label>Select your playdate</label>
            <select @bind="selectedPet.PetID">
                <option value="none">select</option>
                @foreach (var pet in petList)
                {
                    <option value="@pet.PetID">@pet.PetName</option>
                }
            </select>
            Date: <input type="datetime" class="form-control" asp-for="date" asp-format="{0:yyyy-MM-ddTHH:mm}" />
            Address: <input type="text" class="form-control" asp-for="location" />
            <label>Message</label>
            <input @bind-value="message" placeholder="input message you want to send to the owner" />
            <button @onclick="SendEmail">Submit</button>

        </div>
    </div>
}


@code 
{
    string message;
    string location = string.Empty;
    DateTime date = new();
    Pet selectedPet = new();
    public string backgroundImagePath = "./Images/Background_Images/Dog_Background1.jpg";
    List<Pet> petList = new();
    IPetService petService = new PetService();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDataAsync();
            backgroundImagePath = loggedUserState.GetBackgroundImage();
        }
        catch(Exception)
        {

        }
    }

    public async Task LoadDataAsync()
    {
        petList = await petService.GetAllPets();
    }

    public event PropertyChangedEventHandler PropertyChanged;

    /// <summary>
    /// On initialized setup propertyChanged event and load the page data.
    /// </summary>
    protected override void OnInitialized()
    {
        loggedUserState.PropertyChanged += OnloggedUserStateChanged;

        // Subscribe to the PropertyChanged event of AppPreferences
        if (loggedUserState.LoggedUser != null && loggedUserState.LoggedUser.AppPreferences != null)
        {
            loggedUserState.LoggedUser.AppPreferences.PropertyChanged += OnAppPreferencesChanged;
        }
        backgroundImagePath = loggedUserState.GetBackgroundImage();
    }

    /// <summary>
    /// If the user logs in; update the data on this page.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private void OnloggedUserStateChanged(object sender, PropertyChangedEventArgs e)
    {
        // Check if the property that changed is "LoggedUser"
        if (e.PropertyName == nameof(loggedUserState.LoggedUser))
        {
            if (loggedUserState.LoggedUser != null)
            {
                loggedUserState.LoggedUser.AppPreferences.PropertyChanged += OnAppPreferencesChanged;
            }
            backgroundImagePath = loggedUserState.GetBackgroundImage();
            StateHasChanged();
        }
    }

    // Handle changes to the AppPreferences or its sub-properties
    private void OnAppPreferencesChanged(object sender, PropertyChangedEventArgs e)
    {
        // Check if the property that changed is one of the AppPreferences properties
        // that you want to monitor
        if (e.PropertyName == nameof(loggedUserState.LoggedUser) ||
            e.PropertyName == nameof(loggedUserState.LoggedUser.AppPreferences.SelectedFont) ||
            e.PropertyName == nameof(loggedUserState.LoggedUser.AppPreferences.SelectedFontSize) ||
            e.PropertyName == nameof(loggedUserState.LoggedUser.AppPreferences.WebpageAnimalPreference))
        {
            backgroundImagePath = loggedUserState.GetBackgroundImage();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        // Unsubscribe from the PropertyChanged event of AppPreferences
        if (loggedUserState.LoggedUser != null && loggedUserState.LoggedUser.AppPreferences != null)
        {
            loggedUserState.LoggedUser.AppPreferences.PropertyChanged -= OnAppPreferencesChanged;
        }
    }

    public async Task SendEmail()
    {
        EmailService service = new(Configuration);
        var now = DateTime.Now.Date;
        Meeting meeting = new()
        {
            UserCreated = loggedUserState.LoggedUser.UserID,
            MeetingDate = date,
            MeetingLocation = location,
            MeetingCreationDate = now,
            MeetingCancelledDate = now.AddDays(10),
            MeetingName = $"Meeting with {selectedPet.PetName}",
            MeetingMessage = message
        };
        var meetingResponse = await meetingService.CreateMeeting(meeting);

        InvitedUser newInvite = new()
        {
           UserID = selectedPet.OwnerID,
           MeetingID = meetingResponse.MeetingID,
        };
        await service.SendEmail(Configuration["TestEmailName"], "This is a test email", Configuration["TestEmail"]);

        // Commented out as this will actually send emails to whomever we pass through. Use the Test configuration above to determine if functionality is working as expected
        // await service.SendEmail(nameOfSender, $"Hey there! {selectedPet.Owner.FirstName} I was wondering if you would like to meetup for a play date with our furry friends. I see {selectedPet.PetName} would be a great match to meetup with.", selectedPet.Owner.Email);
        await inviteUserService.CreateInvitedUser(newInvite) ;
    }
}
