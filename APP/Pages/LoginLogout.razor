@page "/login-logout"
@using APP.Services;
@using APP.Interfaces;
@using APP.States;
@using APP.Data.Models;

@inject IUserService userService;
@inject LoggedUserState LoggedUserState

<div class="background-container">
    <img src="./Images/three_stooges.jpg" alt="buddies" class="background-image"/>
    <div class="card">

        @if (LoggedUserState.LoggedUser != null)
        {
            <button class="btn btn-primary" @onclick="Logout"> Logout</button>
        }
        else
        {
            <div class="centered title">
                <h1 style="@LoggedUserState.H1StyleTagCSS">Login Page</h1>
            </div>
            <EditForm class="form-container" Model="loginRequest" OnValidSubmit="HandleValidLoginSubmit">
                @if(Loading)
                {
                    <LoadingSpinner></LoadingSpinner>
                }
                <div class="centered">
                    <div style="@LoggedUserState.PStyleTagCSS">
                        <label for="loginUsername">Username:</label>
                        <InputText id="loginUsername" class="inputs" @bind-Value="loginRequest.LoginUsername" />
                        <ValidationMessage For="@(() => loginRequest.LoginUsername)" />
                    </div>
                </div>
                <div class="row-cols centered">
                    <div style="@LoggedUserState.PStyleTagCSS">
                        <label for="loginPassword">Password:</label>
                        <InputText type="password" id="loginPassword" class="inputs" @bind-Value="loginRequest.LoginPassword" />
                        <ValidationMessage For="@(() => loginRequest.LoginPassword)" />
                    </div>
                </div>
                <div class="row-cols centered">
                    <button style="@LoggedUserState.PStyleTagCSS" class="login-button" type="submit">Login</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code 
{

    private bool Loading = false;

    private LoginRequest loginRequest = new LoginRequest();
    private List<User> users;

    protected override async Task OnInitializedAsync()
    {

    }


    private async Task HandleValidLoginSubmit()
    {
        Loading = true;
        StateHasChanged();
        LoggedUserState.LoggedUser = await userService.LoginUser(loginRequest);
        Loading = false;
    }

    private void HandleValidNewUserSubmit()
    {

        // Perform further processing, such as saving the user data
        // You can access user.Username, user.Email, etc.
    }

    public void Logout()
    {
        LoggedUserState.LoggedUser = null;
    }
}
