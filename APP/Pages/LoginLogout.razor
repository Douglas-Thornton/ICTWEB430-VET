@page "/login-logout"
@using APP.Helper;
@using APP.Services;
@using APP.Interfaces;
@using APP.States;
@using APP.Data.Models;
@using Microsoft.Extensions.Configuration;

@inject IUserService userService;
@inject LoggedUserState loggedUserState
@inject IInvitedUserService invitedUserService;

<div class="background-container">
    <img src=@backgroundImagePath alt="@backgroundImagePath" class="background-image" />

    <div class="invite-Container">
        <div class="contrainer">
            <div class="row">
                @if (loggedUserState.LoggedUser != null)
                {
                    <button class="btn btn-primary mt-1" @onclick="Logout"> Logout</button>
                }
                else
                {
                    <div class="centered title">
                        <h1 style="@loggedUserState.H1StyleTagCSS">Login Page</h1>
                    </div>
                    <EditForm class="form-container" Model="loginRequest" OnValidSubmit="HandleValidLoginSubmit">
                        @if (Loading)
                        {
                            <LoadingSpinner></LoadingSpinner>
                        }
                        <div class="centered">
                            <div style="@loggedUserState.PStyleTagCSS">
                                <label for="loginUsername">Username:</label>
                                <InputText id="loginUsername" class="inputs" @bind-Value="loginRequest.LoginUsername" />
                                <ValidationMessage For="@(() => loginRequest.LoginUsername)" />
                            </div>
                        </div>
                        <div class="row-cols centered">
                            <div style="@loggedUserState.PStyleTagCSS">
                                <label for="loginPassword">Password:</label>
                                <InputText type="password" id="loginPassword" class="inputs" @bind-Value="loginRequest.LoginPassword" />
                                <ValidationMessage For="@(() => loginRequest.LoginPassword)" />
                            </div>
                        </div>
                        <div class="row-cols centered">
                            <button style="@loggedUserState.PStyleTagCSS" class="login-button" type="submit">Login</button>
                        </div>
                    </EditForm>
                }
            </div>
            
        </div>
    </div>
</div>

@code
{
    private bool notifications = false;
    private bool Loading = false;

    private LoginRequest loginRequest = new LoginRequest();
    private List<InvitedUser> pendingInvites;
    public string backgroundImagePath = "./Images/Background_Images/Dog_Background1.jpg";

    public PasswordHasher passwordHasher = new PasswordHasher();

    public event PropertyChangedEventHandler PropertyChanged;

   
    protected override async Task OnInitializedAsync()
    {
        loggedUserState.PropertyChanged += OnloggedUserStateChanged;
        backgroundImagePath = loggedUserState.GetBackgroundImage();
    }


    /// <summary>
    /// If the user logs in; update the data on this page.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private void OnloggedUserStateChanged(object sender, PropertyChangedEventArgs e)
    {
        // Check if the property that changed is "LoggedUser"
        if (e.PropertyName == nameof(loggedUserState.LoggedUser))
        {
            StateHasChanged();
        }
    }

    private async Task HandleValidLoginSubmit()
    {
        Loading = true;
        StateHasChanged();



        loggedUserState.LoggedUser = await userService.LoginUser(loginRequest);
        backgroundImagePath = loggedUserState.GetBackgroundImage();
        Loading = false;
        StateHasChanged();
    }

    public void Logout()
    {
        loggedUserState.LoggedUser = null;
        pendingInvites = null;
        backgroundImagePath = loggedUserState.GetBackgroundImage();
        StateHasChanged();
    }
}
