@page "/login-logout"
@using APP.Services;
@using APP.Interfaces;
@using APP.States;
@using APP.Data.Models;

@inject IUserService userService;
@inject LoggedUserState LoggedUserState



<div class="background-container">
    <img src="./Images/three_stooges.jpg" alt="buddies" class="background-image"/>
    <div class="card">
        @if (LoggedUserState.LoggedUser != null)
        {
            <button class="btn btn-primary" @onclick="Logout"> Logout</button>
            return;
        }
        <div class="centered title">
            <h2>Login Page</h2>
        </div>
        <EditForm class="form-container" Model="loginRequest" OnValidSubmit="HandleValidLoginSubmit">
            
            <div class="centered">
                <div>
                    <label for="loginUsername">Username:</label>
                    <InputText id="loginUsername" class="inputs" @bind-Value="loginRequest.LoginUsername" />
                    <ValidationMessage For="@(() => loginRequest.LoginUsername)" />
                </div>
            </div>
            <div class="row-cols centered">
                <div>
                    <label for="loginPassword">Password:</label>
                    <InputText type="password" id="loginPassword" class="inputs" @bind-Value="loginRequest.LoginPassword" />
                    <ValidationMessage For="@(() => loginRequest.LoginPassword)" />
                </div>
            </div>
            <div class="row-cols centered">
                <button class="login-button" type="submit">Login</button>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .title{
        display: flex;
        justify-content: center;
        font-size: 32px;
        font-weight: bolder;
        margin: 20px auto;
    }
    .login-button{
        border-radius: 15px;
        background-color: royalblue;
        min-width: 200px;
        color: white;
    }

    .centered{
        justify-content: center;
    }
    label{
        font-size: 18px;
        font-weight: bold;
    }
    .inputs {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 3px;
    }



</style>

@code 
{
    private LoginRequest loginRequest = new LoginRequest();
    private List<User> users;

    protected override async Task OnInitializedAsync()
    {

    }


    private async Task HandleValidLoginSubmit()
    {
        LoggedUserState.LoggedUser = await userService.LoginUser(loginRequest);
    }

    public async Task Login()
    {
        users = await userService.GetAllUsersList();
        LoggedUserState.LoggedUser = users.FirstOrDefault();
    }

    private void HandleValidNewUserSubmit()
    {

        // Perform further processing, such as saving the user data
        // You can access user.Username, user.Email, etc.
    }

    public void Logout()
    {
        LoggedUserState.LoggedUser = null;
    }
}
