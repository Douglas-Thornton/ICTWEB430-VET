@page "/login-logout"
@using APP.Data.Services;
@using APP.States;
@using static APP.Data.Models.Models;
@inject IUserService userService;
@inject LoggedUserState LoggedUserState




@if (LoggedUserState.LoggedUser != null)
{
    <button class="btn btn-primary" @onclick="Logout"> Logout</button>
}
else
{
    <EditForm class="form-container" Model="loginRequest" OnValidSubmit="HandleValidLoginSubmit">
    <div class="container">
        <div class="row">
            <div class="col">
                <div>
                    <label for="loginUsername">Login Username:</label>
                    <InputText id="loginUsername" class="form-control" @bind-Value="loginRequest.LoginUsername" />
                    <ValidationMessage For="@(() => loginRequest.LoginUsername)" />
                </div>

                <div>
                    <label for="loginPassword">Login Password:</label>
                    <InputText type="password" id="loginPassword" class="form-control" @bind-Value="loginRequest.LoginPassword" />
                    <ValidationMessage For="@(() => loginRequest.LoginPassword)" />
                </div>
            </div>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Login</button>
    </EditForm>
}

@code 
{
    private LoginRequest loginRequest = new LoginRequest();
    private List<User> users;

    protected override async Task OnInitializedAsync()
    {

    }


    private async Task HandleValidLoginSubmit()
    {
        LoggedUserState.LoggedUser = await userService.LoginUser(loginRequest);
    }

    public async Task Login()
    {
        users = await userService.GetAllUsersList();
        LoggedUserState.LoggedUser = users.FirstOrDefault();
    }

    private void HandleValidNewUserSubmit()
    {

        // Perform further processing, such as saving the user data
        // You can access user.Username, user.Email, etc.
    }

    public void Logout()
    {
        LoggedUserState.LoggedUser = null;
    }
}
