@page "/login-logout"
@using APP.Services;
@using APP.Interfaces;
@using APP.States;
@using APP.Data.Models;

@inject IUserService userService;
@inject LoggedUserState loggedUserState
@inject IInvitedUserService invitedUserService;
<div class="background-container">
    <img src=@backgroundImagePath alt="@backgroundImagePath" class="background-image"/>
    <div class="card">

        @if (loggedUserState.LoggedUser != null)
        {
            @if(notifications && !hasResponded)
            {
                <div>
                    <p>You have been invited for a puppy playdate check your emails for more details and press select or reject to respond</p>
                    <button class="btn btn-success" @onclick="AcceptClicked">Accept</button>
                    <button class="btn btn-danger" @onclick="RejectClicked">Reject</button>
                </div>

            }

            <button class="btn btn-primary" @onclick="Logout"> Logout</button>
        }
        else
        {
            <div class="centered title">
                <h1 style="@loggedUserState.H1StyleTagCSS">Login Page</h1>
            </div>
            <EditForm class="form-container" Model="loginRequest" OnValidSubmit="HandleValidLoginSubmit">
                @if(Loading)
                {
                    <LoadingSpinner></LoadingSpinner>
                }
                <div class="centered">
                    <div style="@loggedUserState.PStyleTagCSS">
                        <label for="loginUsername">Username:</label>
                        <InputText id="loginUsername" class="inputs" @bind-Value="loginRequest.LoginUsername" />
                        <ValidationMessage For="@(() => loginRequest.LoginUsername)" />
                    </div>
                </div>
                <div class="row-cols centered">
                    <div style="@loggedUserState.PStyleTagCSS">
                        <label for="loginPassword">Password:</label>
                        <InputText type="password" id="loginPassword" class="inputs" @bind-Value="loginRequest.LoginPassword" />
                        <ValidationMessage For="@(() => loginRequest.LoginPassword)" />
                    </div>
                </div>
                <div class="row-cols centered">
                    <button style="@loggedUserState.PStyleTagCSS" class="login-button" type="submit">Login</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code 
{
    private bool notifications = false;
    private bool Loading = false;
    private bool hasResponded = false;

    private LoginRequest loginRequest = new LoginRequest();
    private List<InvitedUser> users;
    public string backgroundImagePath = "./Images/Background_Images/Dog_Background1.jpg";

    [Parameter]
    public EventCallback<bool> OnAccept { get; set; }

    [Parameter]
    public EventCallback<bool> OnReject { get; set; }

    private async Task AcceptClicked()
    {
        AcceptMeetingResponse response = new()
        {
            Accepted = true,
            UserID = loggedUserState.LoggedUser.UserID
        };
        await invitedUserService.AcceptOrRejectInvite(response);
        hasResponded = true;
    }

    private async Task RejectClicked()
    {
        AcceptMeetingResponse response = new()
        {
            Accepted = false,
            UserID = loggedUserState.LoggedUser.UserID
        };
        await invitedUserService.AcceptOrRejectInvite(response);
        hasResponded = true;
    }

    protected override async Task OnInitializedAsync()
    {
        backgroundImagePath = loggedUserState.GetBackgroundImage();
    }

    public async Task GetInvitedUsers()
    {
        users = await invitedUserService.GetInvitedUserById(loggedUserState.LoggedUser.UserID);
        users = users.Where(invite => invite.Accepted == null).ToList();
        notifications = users[0] != null ? true : false;
    }

    private async Task HandleValidLoginSubmit()
    {
        Loading = true;
        StateHasChanged();
        loggedUserState.LoggedUser = await userService.LoginUser(loginRequest);
        backgroundImagePath = loggedUserState.GetBackgroundImage();
        Loading = false;
        await GetInvitedUsers();
        StateHasChanged();
    }

    private void HandleValidNewUserSubmit()
    {

        // Perform further processing, such as saving the user data
        // You can access user.Username, user.Email, etc.
    }

    public void Logout()
    {
        loggedUserState.LoggedUser = null;
        backgroundImagePath = loggedUserState.GetBackgroundImage();
        StateHasChanged();
    }
}
