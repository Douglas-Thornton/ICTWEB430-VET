@page "/register-profile"
@using APP.Services;
@using APP.Shared.Components
@using APP.States;
@using System.ComponentModel;
@using APP.Data.Models;
@using APP.Interfaces;
@using Newtonsoft.Json;

@inject IUserService userService;
@inject LoggedUserState loggedUserState

@if (isDogModalOpen)
{
    <Modal ModalTitle="Dog Creation"
           OnClose="CloseDogModal">
        <EditForm class="form-container" Model="@CurrentPet" OnValidSubmit="HandleValidPetSubmit">
            <DataAnnotationsValidator />
            <div>
                <label for="petName">Pet Name:</label>
                <InputText id="petName" class="form-control" @bind-Value="CurrentPet.PetName" />
                <ValidationMessage For="@(() => CurrentPet.PetName)" />
            </div>
            <div>
                <label for="petBreed">Pet Breed:</label>
                <InputText id="petBreed" class="form-control" @bind-Value="CurrentPet.PetBreed" />
                <ValidationMessage For="@(() => CurrentPet.PetBreed)" />
            </div>
            <div>
                <label for="petAge">Pet Age:</label>
                <InputNumber id="petAge" class="form-control" @bind-Value="CurrentPet.PetAge" />
                <ValidationMessage For="@(() => CurrentPet.PetAge)" />
            </div>
            <div>
                <label for="petSex">Pet sex:</label>
                <InputSelect id="petSex" class="form-control form-select" @bind-Value="CurrentPet.PetGender">
                    <option>Male</option>
                    <option>Female</option>
                    <option>Unknown</option>
                </InputSelect>
                <ValidationMessage For="@(() => CurrentPet.PetGender)" />
            </div>
            <div>
                <label for="petDiscoverability">Pet Discoverability:</label>
                <InputCheckbox type="checkbox" class="form-check-input" id="petDiscoverability" @bind-Value="@CurrentPet.PetDiscoverability" />
                <ValidationMessage For="@(() => CurrentPet.PetDiscoverability)" />
            </div>
            <div>
                <label for="petSex">Pet Image:</label>
                <InputFile accept="image/*" OnChange="(e) => HandleImageUpload(e, CurrentPet)" />
            </div>
            <div class="modal-footer">
                <button type="button" @onclick="CloseDogModal" class="btn btn-danger">Cancel</button>
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </EditForm>
    </Modal>
}

@if (isUserPreferencesModalOpen)
{
    <Modal ModalTitle="User Preferences - Will be in effect instantly; for these to be permanent you must save your profile."
           OnClose="CloseUserPrefModal">
        <EditForm class="form-container" Model="@CurrentUser.AppPreferences" OnValidSubmit="HandleValidPrefencesSubmit">
            <DataAnnotationsValidator />
            <div>
                <label for="petName">Animal preference:</label>
                <InputSelect id="petName" class="form-control" @bind-Value="CurrentUser.AppPreferences.WebpageAnimalPreference">
                    @foreach (var animal in Enum.GetValues(typeof(UserAnimalPreference)))
                    {
                        <option value="@animal">@animal</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => CurrentUser.AppPreferences.WebpageAnimalPreference)" />
            </div>
            <div>
                <label for="petBreed">Font:</label>
                <InputSelect id="petBreed" class="form-control" @bind-Value="CurrentUser.AppPreferences.SelectedFont">
                    @foreach (var font in Enum.GetValues(typeof(AccessibleFonts)))
                    {
                        <option value="@font">@font</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => CurrentUser.AppPreferences.WebpageAnimalPreference)" />
            </div>
            <div>
                <label for="petAge">Font size:</label>
                <InputSelect id="petAge" class="form-control" @bind-Value="CurrentUser.AppPreferences.SelectedFontSize">
                    @foreach (var fontsize in Enum.GetValues(typeof(AccessibleFontSizes)))
                    {
                        <option value="@fontsize">@fontsize</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => CurrentUser.AppPreferences.WebpageAnimalPreference)" />
            </div>
            <div>
                <p>
                    Example:
                </p>
                <p style="@PStyleTagCSS" class="small-scrollable-container">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
                </p>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary">Close</button>
            </div>
        </EditForm>
    </Modal>

}

<div class="background-container">
    <img src=@backgroundImagePath alt="buddies" class="background-image" />
    <div class="card wide-card">
        <div class="container">
            <div class="row">
                <div class="col">
                    <div class="container">
                        <div class="row">
                            <div class="col">
                                <EditForm class="form-container" Model="CurrentUser" OnValidSubmit="HandleValidUserSubmit">
                                    @if(Loading)
                                    {
                                        <LoadingSpinner></LoadingSpinner>
                                    }

                                    <DataAnnotationsValidator />

                                    <div>
                                        <label for="firstName">First Name:</label>
                                        <InputText id="firstName" class="form-control" @bind-Value="CurrentUser.FirstName" />
                                        <ValidationMessage For="@(() => CurrentUser.FirstName)" />
                                    </div>

                                    <div>
                                        <label for="surname">Surname:</label>
                                        <InputText id="surname" class="form-control" @bind-Value="CurrentUser.Surname" />
                                        <ValidationMessage For="@(() => CurrentUser.Surname)" />
                                    </div>

                                    <div>
                                        <label for="phoneNumber">Phone Number:</label>
                                        <InputText id="phoneNumber" class="form-control" @bind-Value="CurrentUser.PhoneNumber" />
                                        <ValidationMessage For="@(() => CurrentUser.PhoneNumber)" />
                                    </div>

                                    <div>
                                        <label for="email">Email:</label>
                                        <InputText id="email" class="form-control" @bind-Value="CurrentUser.Email" />
                                        <ValidationMessage For="@(() => CurrentUser.Email)" />
                                    </div>

                                    <div>
                                        <label for="suburb">Suburb:</label>
                                        <InputText id="suburb" class="form-control" @bind-Value="CurrentUser.Suburb" />
                                        <ValidationMessage For="@(() => CurrentUser.Suburb)" />
                                    </div>

                                    <div>
                                        <label for="postcode">Postcode:</label>
                                        <InputText id="postcode" class="form-control" @bind-Value="CurrentUser.Postcode" />
                                        <ValidationMessage For="@(() => CurrentUser.Postcode)" />
                                    </div>

                                    <div>
                                        <label for="loginUsername">Login Username:</label>
                                        <InputText id="loginUsername" class="form-control" @bind-Value="CurrentUser.LoginUsername" />
                                        <ValidationMessage For="@(() => CurrentUser.LoginUsername)" />
                                    </div>

                                    <div>
                                        <label for="loginCurrentUsername">Login Password:</label>
                                        <InputText id="loginCurrentUsername" class="form-control" type="password" @bind-Value="CurrentUser.LoginPassword" />
                                        <ValidationMessage For="@(() => CurrentUser.LoginPassword)" />
                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <button class="btn btn-secondary" @onclick=OpenUserPrefModal>Change app preferences</button>
                                        </div>
                                        <div class="col">
                                            <button class="btn btn-primary" type="submit">Save Changes</button>
                                        </div>
                                    </div>
                                </EditForm>
                            </div>
                            <div class="col">
                                <div class="col">
                                    <button class="btn btn-primary" @onclick=CreatePet>Add dog</button>
                                    <div class="scrollable-container">
                                        @foreach (Pet pet in Pets)
                                        {
                                            <PetTile pet="pet" DeleteEnabled=true EditEnabled=true OnDelete="()=>DeletePet(pet)" OnEdit="()=>EditPet(pet)"></PetTile>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code
{
    private User NewUser = new User();
    private User EditUser = new User();
    private Pet NewPet = new Pet();
    private Pet PetToEdit = new Pet();
    private List<Pet> Pets = new List<Pet>();
    private Pet TempPet = new Pet();
    private bool Loading = false;
    public bool isDogModalOpen = false;
    public bool isUserPreferencesModalOpen = false;
    public ModalMode DogModalMode = ModalMode.Edit;

    public event PropertyChangedEventHandler PropertyChanged;

    private Pet CurrentPet => DogModalMode == ModalMode.Create ? NewPet : TempPet;
    private User CurrentUser => loggedUserState.LoggedUser != null ? EditUser : NewUser;
    private AppPreferences CurrentUserPreferences => loggedUserState.LoggedUser != null ? EditUser.AppPreferences : NewUser.AppPreferences;
    public string backgroundImagePath = "./Images/Background_Images/Dog_Background1.jpg";

    private AppPreferences TempAppPreferences = new AppPreferences();
    //// <summary>
    /// If the editForm is valid; create the new user.
    /// </summary>
    private async void HandleValidUserSubmit()
    {
        if (!isDogModalOpen && !isUserPreferencesModalOpen)
        {
            Loading = true;
            StateHasChanged();
            var response = new ServiceResponse() { };

            if (loggedUserState.LoggedUser != null)
            {
                EditUser.Pets = Pets;
                response = await userService.UpdateUserAsync(EditUser);
            }
            else
            {
                NewUser.Pets = Pets;
                response = await userService.CreateUserAsync(NewUser);
            }
            Loading = false;
            StateHasChanged();
            if (response.success)
            {
                loggedUserState.LoggedUser = response.User;
                NewUser = new User();
                EditUser = new User();
                Pets = new List<Pet>();
                loadPage();
            }
        }
    }

    /// <summary>
    /// If the editform is valid; update or create the pet.
    /// </summary>
    /// <returns></returns>
    private async Task HandleValidPetSubmit()
    {
        switch (DogModalMode)
        {
            case ModalMode.Create:
                Pets.Add(NewPet);
                break;
            case ModalMode.Edit:
                Pets.Remove(PetToEdit);
                Pets.Add(TempPet);
                break;
        }
        CloseDogModal();
        StateHasChanged();
    }

    /// <summary>
    /// If the editform is valid; update or create the pet.
    /// </summary>
    /// <returns></returns>
    private async Task HandleValidPrefencesSubmit()
    {
        CloseUserPrefModal();
        StateHasChanged();
    }

    /// <summary>
    /// On initialized setup propertyChanged event and load the page data.
    /// </summary>
    protected override void OnInitialized()
    {
        loadPage();


        loggedUserState.PropertyChanged += OnloggedUserStateChanged;
    }

    /// <summary>
    /// On load; setup empty user objects and try and load the currently logged in user data.
    /// </summary>
    private void loadPage()
    {
        NewUser = new User();
        EditUser = new User();
        Pets = new List<Pet>();

        if (loggedUserState.LoggedUser != null)
        {
            EditUser = loggedUserState.LoggedUser;
            Pets = loggedUserState.LoggedUser.Pets.ToList();
        }
        backgroundImagePath = loggedUserState.GetBackgroundImage();
        StateHasChanged();
    }

    /// <summary>
    /// If the user logs in; update the data on this page.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private void OnloggedUserStateChanged(object sender, PropertyChangedEventArgs e)
    {
        // Check if the property that changed is "LoggedUser"
        if (e.PropertyName == nameof(loggedUserState.LoggedUser))
        {
            loadPage();
        }
    }

    /// <summary>
    /// Handle a uploaded photo.
    /// </summary>
    /// <param name="e"></param>
    /// <param name="petToUpload"></param>
    /// <returns></returns>
    private async Task HandleImageUpload(InputFileChangeEventArgs e, Pet petToUpload)
    {
        petToUpload.PetPhotoUpload = null;
        petToUpload.PetPhoto = null;
        try
        {
            petToUpload.PetPhotoUpload = e.File;
            using (MemoryStream memoryStream = new MemoryStream())
            {
                // Read the content of the IBrowserFile into the MemoryStream
                await petToUpload.PetPhotoUpload.OpenReadStream().CopyToAsync(memoryStream);

                // Assign the byte[] to the Pet's PetPhoto property
                petToUpload.PetPhoto = memoryStream.ToArray();
            }
        }
        catch (Exception ex)
        {

        }

    }

    /// <summary>
    /// Open the dog modal in create mode.
    /// </summary>
    private void CreatePet()
    {
        DogModalMode = ModalMode.Create;
        isDogModalOpen = true;
    }

    /// <summary>
    /// Open tbe dog modal in edit mode.
    /// </summary>
    /// <param name="petToEdit"></param>
    private void EditPet(Pet petToEdit)
    {
        TempPet = new Pet
            {
                PetName = petToEdit.PetName,
                PetBreed = petToEdit.PetBreed,
                PetAge = petToEdit.PetAge,
                PetGender = petToEdit.PetGender,
                PetID = PetToEdit.PetID,
                PetPhotoUpload = petToEdit.PetPhotoUpload,
                PetPhoto = petToEdit.PetPhoto,
                PetDiscoverability = petToEdit.PetDiscoverability,
                PetPhotoFileLocation = PetToEdit.PetPhotoFileLocation
            };

        PetToEdit = petToEdit;
        DogModalMode = ModalMode.Edit;
        isDogModalOpen = true;
    }

    /// <summary>
    /// Remove a pet from the user's pet list.
    /// </summary>
    /// <param name="petToDelete"></param>
    private void DeletePet(Pet petToDelete)
    {
        Pets.Remove(petToDelete);
    }

    /// <summary>
    /// Close the modal and clear the edit and new pets.
    /// </summary>
    private void CloseDogModal()
    {
        TempPet = new Pet();
        NewPet = new Pet();
        PetToEdit = new Pet();
        isDogModalOpen = false;
    }

    private void DogModalOnClose(bool confirm)
    {
        CloseDogModal();
    }

    /// <summary>
    /// Close the modal.
    /// </summary>
    private void CloseUserPrefModal()
    {
        isUserPreferencesModalOpen = false;
    }

    /// <summary>
    /// Close the modal and clear the edit and new pets.
    /// </summary>
    private void OpenUserPrefModal()
    {
        isUserPreferencesModalOpen = true;
    }

    /// <summary>
    /// Returns combined family and size required to style a P tag.
    /// </summary>
    public string PStyleTagCSS
    {
        get
        {
            return GetFontFamilyCSS + " " + GetFontSizePCSS;
        }
    }

    // Properties for font family for CSS.
    public string GetFontFamilyCSS
    {
        get
        {

            if (Enum.TryParse(CurrentUserPreferences.SelectedFont, out AccessibleFonts selectedFont))
            {
                switch (selectedFont)
                {
                    case AccessibleFonts.Arial:
                        return "font-family: Arial, sans-serif  !important;";
                    case AccessibleFonts.TimesNewRoman:
                        return "font-family: Times New Roman, serif !important;";
                    case AccessibleFonts.Verdana:
                        return "font-family: Verdana, sans-serif !important;";
                    case AccessibleFonts.Tahoma:
                        return "font-family: Tahoma, sans-serif !important;";
                    case AccessibleFonts.Calibri:
                        return "font-family: Calibri, sans-serif !important;";
                    case AccessibleFonts.Helvetica:
                        return "font-family: Helvetica, sans-serif !important;";
                    default:
                        return "font-family: Arial, sans-serif !important;";
                }
            }
            else
            {
                // Handle the case where the string doesn't match any enum value
                return "font-family: Arial, sans-serif !important;";
            }
        }
    }

    // Properties for font size for a P tag for CSS.
    public string GetFontSizePCSS
    {
        get
        {
            if (Enum.TryParse(CurrentUserPreferences.SelectedFontSize, out AccessibleFontSizes selectedFontSize))
            {
                switch (selectedFontSize)
                {
                    case AccessibleFontSizes.Small:
                        return "font-size: 12px;";
                    case AccessibleFontSizes.Medium:
                        return "font-size: 16px;";
                    case AccessibleFontSizes.Large:
                        return "font-size: 20px;";
                    case AccessibleFontSizes.XLarge:
                        return "font-size: 24px;";
                    case AccessibleFontSizes.XXLarge:
                        return "font-size: 28px;";
                    default:
                        return "font-size: 16px;"; // Default to Medium
                }
            }
            else
            {
                return "font-size: 16px;"; // Default to Medium
            }
        }
    }
}
